// Code generated by protoc-gen-go.
// source: logger.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Emtpy struct {
}

func (m *Emtpy) Reset()                    { *m = Emtpy{} }
func (m *Emtpy) String() string            { return proto.CompactTextString(m) }
func (*Emtpy) ProtoMessage()               {}
func (*Emtpy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type LogLoginReq struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId" json:"UserId,omitempty"`
}

func (m *LogLoginReq) Reset()                    { *m = LogLoginReq{} }
func (m *LogLoginReq) String() string            { return proto.CompactTextString(m) }
func (*LogLoginReq) ProtoMessage()               {}
func (*LogLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *LogLoginReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type LogLoginRes struct {
	LastLogin int64 `protobuf:"varint,1,opt,name=LastLogin" json:"LastLogin,omitempty"`
}

func (m *LogLoginRes) Reset()                    { *m = LogLoginRes{} }
func (m *LogLoginRes) String() string            { return proto.CompactTextString(m) }
func (*LogLoginRes) ProtoMessage()               {}
func (*LogLoginRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *LogLoginRes) GetLastLogin() int64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

func init() {
	proto.RegisterType((*Emtpy)(nil), "protos.Emtpy")
	proto.RegisterType((*LogLoginReq)(nil), "protos.LogLoginReq")
	proto.RegisterType((*LogLoginRes)(nil), "protos.LogLoginRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Logger service

type LoggerClient interface {
	LogLogin(ctx context.Context, in *LogLoginReq, opts ...grpc.CallOption) (*LogLoginRes, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) LogLogin(ctx context.Context, in *LogLoginReq, opts ...grpc.CallOption) (*LogLoginRes, error) {
	out := new(LogLoginRes)
	err := grpc.Invoke(ctx, "/protos.Logger/LogLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logger service

type LoggerServer interface {
	LogLogin(context.Context, *LogLoginReq) (*LogLoginRes, error)
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_LogLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).LogLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Logger/LogLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).LogLogin(ctx, req.(*LogLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogLogin",
			Handler:    _Logger_LogLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger.proto",
}

func init() { proto.RegisterFile("logger.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xc9, 0x4f, 0x4f,
	0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x52, 0x32, 0xe9,
	0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99, 0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25, 0x89,
	0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10, 0x55, 0x4a, 0xec, 0x5c, 0xac, 0xae, 0xb9, 0x25, 0x05, 0x95,
	0x4a, 0xaa, 0x5c, 0xdc, 0x3e, 0xf9, 0xe9, 0x3e, 0xf9, 0xe9, 0x99, 0x79, 0x41, 0xa9, 0x85, 0x42,
	0x62, 0x5c, 0x6c, 0xa1, 0xc5, 0xa9, 0x45, 0x9e, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x50, 0x9e, 0x92, 0x36, 0xb2, 0xb2, 0x62, 0x21, 0x19, 0x2e, 0x4e, 0x9f, 0xc4, 0xe2, 0x12, 0x30,
	0x1f, 0xac, 0x92, 0x39, 0x08, 0x21, 0x60, 0x14, 0xcf, 0xc5, 0xe6, 0x03, 0x76, 0x92, 0x50, 0x28,
	0x17, 0x07, 0x4c, 0x9b, 0x90, 0x30, 0xc4, 0xea, 0x62, 0x3d, 0x24, 0xfb, 0xa4, 0xb0, 0x08, 0x16,
	0x2b, 0xc9, 0x37, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x52, 0x49, 0x5c, 0xbf, 0xa8, 0x20, 0x59, 0xbf,
	0xcc, 0x50, 0x1f, 0xe2, 0x41, 0x10, 0x95, 0x03, 0x52, 0x93, 0x04, 0xf1, 0xa3, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xbf, 0x5c, 0x38, 0x0a, 0xfa, 0x00, 0x00, 0x00,
}
