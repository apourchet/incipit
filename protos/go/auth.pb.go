// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	logger.proto

It has these top-level messages:
	UserExistsReq
	UserExistsRes
	RegisterReq
	RegisterRes
	LoginReq
	LoginRes
	LogoutReq
	LogoutRes
	DeregisterReq
	DeregisterRes
	Emtpy
	LogLoginReq
	LogLoginRes
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserExistsReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *UserExistsReq) Reset()                    { *m = UserExistsReq{} }
func (m *UserExistsReq) String() string            { return proto.CompactTextString(m) }
func (*UserExistsReq) ProtoMessage()               {}
func (*UserExistsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserExistsReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type UserExistsRes struct {
	Found bool `protobuf:"varint,1,opt,name=found" json:"found,omitempty"`
}

func (m *UserExistsRes) Reset()                    { *m = UserExistsRes{} }
func (m *UserExistsRes) String() string            { return proto.CompactTextString(m) }
func (*UserExistsRes) ProtoMessage()               {}
func (*UserExistsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserExistsRes) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type RegisterReq struct {
	Key  string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RegisterReq) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type RegisterRes struct {
}

func (m *RegisterRes) Reset()                    { *m = RegisterRes{} }
func (m *RegisterRes) String() string            { return proto.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()               {}
func (*RegisterRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type LoginReq struct {
	Key  string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LoginReq) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type LoginRes struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginRes) Reset()                    { *m = LoginRes{} }
func (m *LoginRes) String() string            { return proto.CompactTextString(m) }
func (*LoginRes) ProtoMessage()               {}
func (*LoginRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginRes) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LogoutReq struct {
}

func (m *LogoutReq) Reset()                    { *m = LogoutReq{} }
func (m *LogoutReq) String() string            { return proto.CompactTextString(m) }
func (*LogoutReq) ProtoMessage()               {}
func (*LogoutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LogoutRes struct {
}

func (m *LogoutRes) Reset()                    { *m = LogoutRes{} }
func (m *LogoutRes) String() string            { return proto.CompactTextString(m) }
func (*LogoutRes) ProtoMessage()               {}
func (*LogoutRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DeregisterReq struct {
}

func (m *DeregisterReq) Reset()                    { *m = DeregisterReq{} }
func (m *DeregisterReq) String() string            { return proto.CompactTextString(m) }
func (*DeregisterReq) ProtoMessage()               {}
func (*DeregisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DeregisterRes struct {
}

func (m *DeregisterRes) Reset()                    { *m = DeregisterRes{} }
func (m *DeregisterRes) String() string            { return proto.CompactTextString(m) }
func (*DeregisterRes) ProtoMessage()               {}
func (*DeregisterRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*UserExistsReq)(nil), "protos.UserExistsReq")
	proto.RegisterType((*UserExistsRes)(nil), "protos.UserExistsRes")
	proto.RegisterType((*RegisterReq)(nil), "protos.RegisterReq")
	proto.RegisterType((*RegisterRes)(nil), "protos.RegisterRes")
	proto.RegisterType((*LoginReq)(nil), "protos.LoginReq")
	proto.RegisterType((*LoginRes)(nil), "protos.LoginRes")
	proto.RegisterType((*LogoutReq)(nil), "protos.LogoutReq")
	proto.RegisterType((*LogoutRes)(nil), "protos.LogoutRes")
	proto.RegisterType((*DeregisterReq)(nil), "protos.DeregisterReq")
	proto.RegisterType((*DeregisterRes)(nil), "protos.DeregisterRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthService service

type AuthServiceClient interface {
	UserExists(ctx context.Context, in *UserExistsReq, opts ...grpc.CallOption) (*UserExistsRes, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRes, error)
	Deregister(ctx context.Context, in *DeregisterReq, opts ...grpc.CallOption) (*DeregisterRes, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) UserExists(ctx context.Context, in *UserExistsReq, opts ...grpc.CallOption) (*UserExistsRes, error) {
	out := new(UserExistsRes)
	err := grpc.Invoke(ctx, "/protos.AuthService/UserExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := grpc.Invoke(ctx, "/protos.AuthService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := grpc.Invoke(ctx, "/protos.AuthService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRes, error) {
	out := new(LogoutRes)
	err := grpc.Invoke(ctx, "/protos.AuthService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Deregister(ctx context.Context, in *DeregisterReq, opts ...grpc.CallOption) (*DeregisterRes, error) {
	out := new(DeregisterRes)
	err := grpc.Invoke(ctx, "/protos.AuthService/Deregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	UserExists(context.Context, *UserExistsReq) (*UserExistsRes, error)
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
	Login(context.Context, *LoginReq) (*LoginRes, error)
	Logout(context.Context, *LogoutReq) (*LogoutRes, error)
	Deregister(context.Context, *DeregisterReq) (*DeregisterRes, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_UserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AuthService/UserExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UserExists(ctx, req.(*UserExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AuthService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AuthService/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Deregister(ctx, req.(*DeregisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserExists",
			Handler:    _AuthService_UserExists_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _AuthService_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x03, 0x5c, 0x08, 0x1c, 0x42, 0x2e, 0x77, 0x80, 0x5c, 0xee, 0x84, 0xdc, 0xcb, 0x3d,
	0x89, 0x89, 0x71, 0x41, 0x55, 0x76, 0xee, 0x4c, 0x34, 0x6e, 0x88, 0x8b, 0x1a, 0xdd, 0x98, 0x98,
	0x54, 0x39, 0x96, 0x06, 0xd2, 0x81, 0x9e, 0x29, 0xd1, 0xad, 0xaf, 0xe0, 0xe3, 0xf8, 0x18, 0xbe,
	0x82, 0x0f, 0x62, 0x98, 0xb1, 0xb6, 0xc5, 0x2e, 0x5c, 0x75, 0xe6, 0xcf, 0xfc, 0x5f, 0x66, 0xbe,
	0x93, 0x02, 0x78, 0xb1, 0x9e, 0x8d, 0x96, 0x91, 0xd2, 0x4a, 0xd4, 0xcc, 0x87, 0xe5, 0xc0, 0x57,
	0xca, 0x5f, 0x90, 0xe3, 0x2d, 0x03, 0xc7, 0x0b, 0x43, 0xa5, 0x3d, 0x1d, 0xa8, 0x90, 0xed, 0x29,
	0xfc, 0x0f, 0xad, 0x4b, 0xa6, 0xe8, 0xf4, 0x21, 0x60, 0xcd, 0x2e, 0xad, 0x44, 0x1b, 0x2a, 0x73,
	0x7a, 0xec, 0x97, 0x86, 0xa5, 0xdd, 0x86, 0xbb, 0x59, 0xe2, 0x4e, 0xfe, 0x08, 0x8b, 0x2e, 0x54,
	0xef, 0x55, 0x1c, 0x4e, 0xcd, 0xa1, 0xba, 0x6b, 0x37, 0x38, 0x86, 0xa6, 0x4b, 0x7e, 0xc0, 0x9a,
	0xa2, 0x42, 0x8e, 0x10, 0xf0, 0x63, 0xe9, 0x31, 0xf7, 0xcb, 0x26, 0x32, 0x6b, 0x6c, 0x65, 0x4b,
	0x8c, 0xfb, 0x50, 0x9f, 0x28, 0x3f, 0x08, 0xbf, 0x0f, 0x18, 0x7e, 0x36, 0xcc, 0xbd, 0xb4, 0x9a,
	0x53, 0xf8, 0xd1, 0xb1, 0x1b, 0x6c, 0x42, 0x63, 0xa2, 0x7c, 0x15, 0x6b, 0x97, 0x56, 0xd9, 0x0d,
	0xe3, 0x4f, 0x68, 0x9d, 0x50, 0x94, 0xde, 0x79, 0x3b, 0xe0, 0xc3, 0x97, 0x0a, 0x34, 0x8f, 0x63,
	0x3d, 0xbb, 0xa0, 0x68, 0x1d, 0xdc, 0x91, 0xb8, 0x06, 0x48, 0x55, 0x88, 0x9e, 0x75, 0xc8, 0xa3,
	0x9c, 0x41, 0x59, 0x18, 0x33, 0xfe, 0x7b, 0x7a, 0x7d, 0x7b, 0x2e, 0xff, 0x11, 0xbf, 0xcd, 0x24,
	0xd6, 0x07, 0xce, 0x66, 0x56, 0x4e, 0xcc, 0x14, 0x91, 0xc5, 0x5d, 0x41, 0x3d, 0x71, 0x21, 0x3a,
	0x09, 0x23, 0xa3, 0x54, 0x16, 0x84, 0x8c, 0x43, 0x83, 0x95, 0xd8, 0xcb, 0x61, 0x93, 0x47, 0x1c,
	0x95, 0xf6, 0xc4, 0x19, 0x54, 0x8d, 0x22, 0xd1, 0x4e, 0xfa, 0x89, 0x63, 0xb9, 0x9d, 0x30, 0x4a,
	0x83, 0xeb, 0x0a, 0x91, 0xc3, 0x2d, 0x4c, 0xff, 0x1c, 0x6a, 0x56, 0x9e, 0xf8, 0x95, 0xe9, 0x59,
	0xb3, 0xf2, 0x4b, 0xc4, 0xf8, 0xd7, 0xb0, 0xfa, 0xd8, 0xd9, 0x66, 0xa9, 0x58, 0x6f, 0x2e, 0x76,
	0x03, 0x90, 0xea, 0x4e, 0x6d, 0xe6, 0x66, 0x22, 0x0b, 0x63, 0x46, 0x34, 0xec, 0x01, 0xe6, 0x6d,
	0x4e, 0x29, 0xf3, 0xf0, 0x5b, 0xfb, 0x07, 0x8c, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xab,
	0x3a, 0x96, 0x16, 0x03, 0x00, 0x00,
}
